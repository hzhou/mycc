page: libmycc, -
    module: c
    has_bool: 1

    $include stdio, stdbool, stdint, stdlib, string, unistd

    $struct(map_entry) p_start, p_end, n_offset, s_file[128], bfd* abfd, asymbol **syms, n_syms

    $global struct map_entry maps[1024]
    $global int num_map_entries = 0

    $list init, __cyg_profile_func_enter, __cyg_profile_func_exit

#---------------------------------------- 
macros:
    attr: __attribute__((no_instrument_function))
    attr_static: __attribute__((no_instrument_function)) static
    constructor: __attribute__((constructor)) __attribute__((no_instrument_function))
    destructor: __attrilbute__((destructor)) __attribute__((no_instrument_function))

fncode: init: $(constructor) void
    load_maps()
fncode: my_exit: $(destructor) void
    unload_maps()

fncode: __cyg_profile_func_enter(void *fn, void *callsite): $(attr) void
    get_funcname(fn)
    $if found
        $print Enter $functionname
    $else
        $print "Enter %lx from $callsite", cur_address

fncode: __cyg_profile_func_exit(void *fn, void *callsite): $(attr) void
    get_funcname(fn)
    $if found
        $print Exit $functionname
    $else
        $print Exit $fn from $callsite

#---------------------------------------- 
fncode: load_maps: $(attr_static) void    
    pid_t pid = getpid();

    char path[1024];
    sprintf(path, "/proc/%d/maps", (int) pid);
    &call open_rs, path
        $if parse_maps_line(num_map_entries, s)
            num_map_entries++

fncode: unload_maps: $(attr_static) void
    $for i=0:num_map_entries
        p = &maps[i]
        free(p->syms)
        $if p->abfd
            bfd_close(p->abfd)

fncode: parse_maps_line(i, s_line): $(attr_static) bool
    # $print [$s_line]
    s = s_line

    $local s1, s2 = NULL, s_off = NULL, s_path: const char *
    s1 = s

    $call skip_to, '-'
    *s = '\0'; s++;
    s2 = s

    $call skip_to, ' '
    *s = '\0'; s++;
    $if s $eq "r-xp"
        s+=6
        s_off = s
    $else
        return false

    $call skip_to, ' '
    *s = '\0'; s++;

    $call skip_to, '/'
    $if *s == '/'
        s_path = s
        $call skip_to, '\n'
        *s = '\0'
    $else
        return false

    $call add_entry
    return true;

    # --------------------------------------------
    subcode: skip_to(c)
        $while *s && *s != $(c)
            s++

    subcode: add_entry
        struct map_entry *p = &(maps[i]);
        p->p_start = (void *) (uintptr_t) strtol(s1, NULL, 16);
        p->p_end = (void *) (uintptr_t) strtol(s2, NULL, 16);
        p->n_offset = (int) strtol(s_off, NULL, 16);
        strncpy(p->s_file, s_path, 128);
        printf("%p - %p @ %d -- %s\n", p->p_start, p->p_end, p->n_offset, p->s_file);

        p->abfd = NULL
        p->syms = NULL
        p->n_syms = 0

        load_symbols(p)

#---------------------------------------- 
fncode: is_file_dynamic(const char *filename): bool
    $my const char *s = filename
    $while *s
        $if s $eq ".so"
            $if *s == '\0' || *s == '.'
                return true
        s++
    return false

fncode: load_symbols(struct map_entry *p)
    $include bfd.h
    $local bfd* abfd
    abfd = bfd_openr(p->s_file, "x86_64-pc-linux-gnu")
    assert(abfd)
    p->abfd = abfd

    bfd_check_format(abfd, bfd_object);

    $if (bfd_get_file_flags(abfd) & HAS_SYMS) == 0
        return

    is_dynamic = is_file_dynamic(p->s_file)

    $local long storage
    $if is_dynamic
        storage = bfd_get_dynamic_symtab_upper_bound(abfd)
    $else
        storage = bfd_get_symtab_upper_bound(abfd)

    $if storage <= 0
        return

    $global asymbol **syms
    syms = malloc(storage)

    $if is_dynamic
        n_syms = bfd_canonicalize_dynamic_symtab(abfd, syms)
    $else
        n_syms = bfd_canonicalize_symtab(abfd, syms)
    assert(n_syms > 0)

    p->syms = syms
    p->n_syms = n_syms

#---------------------------------------- 
subcode: _autoload
    $global filename, functionname: const char *
    $global line, discriminator: int
    $global found: bool
    $global int cur_map_entry_idx
    $global bfd_vma cur_address

fncode: get_funcname(void *ptr)
    $for i=0:num_map_entries
        $my struct map_entry * p = &maps[i]

        $if ptr >= p->p_start && ptr < p->p_end
            found = false
            cur_map_entry_idx = i
            cur_address = (uintptr_t) (ptr - p->p_start) + p->n_offset
            $print "%lx - [%s] - %d syms\n", cur_address, p->s_file, p->n_syms
            $for j=0:p->n_syms
                $print " %d - %lx - %s", j, p->syms[j]->value, p->syms[j]->name
                # $if cur_address == p->syms[j]->
/*
fncode: get_funcname(void *ptr)
    $list find_address_in_section

    $for i=0:num_map_entries
        $my struct map_entry * p = &maps[i]

        $if ptr >= p->p_start && ptr < p->p_end
            found = false
            cur_map_entry_idx = i
            cur_address = (uintptr_t) (ptr - p->p_start) + p->n_offset
            $print "    find %p in %s ...", ptr, p->s_file
            bfd_map_over_sections(p->abfd, find_address_in_section, NULL)
            $if found
                return

fncode: find_address_in_section(bfd *abfd, asection *section, void *data): static void
    $if found
        return
    $if !(bfd_section_flags(section) & SEC_ALLOC)
        return

    $my bfd_vma vma
    vma = bfd_section_vma(section)

    $my bfd_size_type size
    size = bfd_section_size(section)

    $if cur_address < vma || cur_address >= vma + size
        return

    struct map_entry *p = &maps[cur_map_entry_idx]
    found = bfd_find_nearest_line_discriminator(p->abfd, section, p->syms, cur_address-vma, &filename, &functionname, &line, &discriminator)
*/
